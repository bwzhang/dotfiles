\q
show tables;
\dt
drop table boatres;
\dt
CREATE DATABASE hw33;
\connect hw33
CREATE TABLE Ships (name VARCHAR(20) PRIMARY KEY,                     launched DATE);
CREATE TABLE Battles (name VARCHAR(20) PRIMARY KEY,                       battledate DATE);
CREATE TABLE Outcomes (shipname VARCHAR(20),                        battlename VARCHAR(20),                        result VARCHAR(20),                       FOREIGN KEY (shipname) REFERENCES Ships (name),                       FOREIGN KEY (battlename) REFERENCES Battles (name),                       PRIMARY KEY (shipname, battlename));
                       INSERT INTO Ships VALUES ('MyFirstShip', '01-01-1850'), ('MySecondShip', '01-01-1900'), ('MyThirdShip', '01-01-1950');
INSERT INTO Battles Values ('FirstBattle', '01-01-1800'), ('SecondBattle', '01-01-1851'), ('ThirdBattle', '01-01-1901');
\d
ALTER TABLE OutcomesADD CONSTRAINT ResultConstraint CHECK (result='ok' OR result='damaged' OR result='sunk');
INSERT INTO Outcomes VALUES ('MyFirstShip', 'SecondBattle', 'invalid');
DELETE FROM Outcomes;
INSERT INTO Outcomes VALUES ('MyFirstShip', 'SecondBattle', 'ok');
DELETE FROM Outcomes;
INSERT INTO Outcomes VALUES ('MyFirstShip', 'SecondBattle', 'damaged');
DELETE FROM Outcomes;
INSERT INTO Outcomes VALUES ('MyFirstShip', 'SecondBattle', 'sunk');
CREATE OR REPLACE FUNCTION checkDate() RETURNS trigger AS $checkDate$ declare launchDate DATE; battleDate DATE; BEGIN Select S.launched INTO launchDate From Ships S where S.name= NEW.shipname; Select B.battledate INTO battleDate From Battles B where B.name= NEW.shipname; IF launchDate>battleDate THEN RAISE EXCEPTION 'cannot battle before launch'; END IF; RETURN NEW; END;$checkDate$ LANGUAGE plpgsql;
CREATE TRIGGER checkDate BEFORE INSERT OR UPDATE ONOutcomesFOR EACH ROW EXECUTE PROCEDURE checkDate(); 
CREATE OR REPLACE FUNCTION checkDate2() RETURNS trigger AS $checkDate2$ declare bname VARCHAR(20); battleDate DATE; BEGIN Select O.battlename INTO bname From Outcomes O where O.shipname= NEW.name; Select B.battledate INTO battleDate From Battles B where B.name= bname; IF NEW.launched>battleDate THEN RAISE EXCEPTION 'cannot battle before launch'; END IF; RETURN NEW; END;$checkDate2$ LANGUAGE plpgsql;
CREATE TRIGGER checkDate2 BEFORE UPDATE ONShipsFOR EACH ROW EXECUTE PROCEDURE checkDate2(); 
CREATE OR REPLACE FUNCTION checkDate3() RETURNS trigger AS $checkDate3$ declare sname VARCHAR(20); launchDate DATE; BEGIN Select O.shipname INTO sname From Outcomes O where O.battlename= NEW.name; Select S.launched INTO launchDate From Ships S where S.name= sname; IF launchDate>NEW.battledate THEN RAISE EXCEPTION 'cannot battle before launch'; END IF; RETURN NEW; END;$checkDate3$ LANGUAGE plpgsql;
CREATE TRIGGER checkDate3 BEFORE UPDATE ONBattlesFOR EACH ROW EXECUTE PROCEDURE checkDate3(); 
DELETE FROM Outcomes;
DELETE FROM Ships;
DELETE FROM Battles;
\df
INSERT INTO Ships VALUES ('MyFirstShip', '01-01-1850'), ('MySecondShip', '01-01-1900'), ('MyThirdShip', '01-01-1950');
INSERT INTO Battles Values ('FirstBattle', '01-01-1800'), ('SecondBattle', '01-01-1851'), ('ThirdBattle', '01-01-1901');
INSERT INTO Outcomes VALUES ('MyFirstShip', 'SecondBattle', 'sunk');
INSERT INTO Outcomes VALUES ('MySecondShip', 'FirstBattle', 'ok');
UPDATE Battles SET battledate='01-01-1700' WHERE name='SecondBattle';
UPDATE Ships SET launched='01-01-2000' WHERE name='MyFirstShip';
INSERT INTO Outcomes VALUES ('MySecondShip', 'ThirdBattle', 'ok');
\connect postgres
drop database hw33;
create database hw34;
\connect hw34
CREATE TABLE Ships (name VARCHAR(20) PRIMARY KEY,                     launched DATE);
CREATE TABLE Battles (name VARCHAR(20) PRIMARY KEY,                       battledate DATE);
CREATE TABLE Outcomes (shipname VARCHAR(20),                        battlename VARCHAR(20),                        result VARCHAR(20),                       FOREIGN KEY (shipname) REFERENCES Ships (name),                       FOREIGN KEY (battlename) REFERENCES Battles (name),                       PRIMARY KEY (shipname, battlename));
                       INSERT INTO Ships VALUES ('MyFirstShip', '01-01-1850'), ('MySecondShip', '01-01-1900'), ('MyThirdShip', '01-01-1950');
INSERT INTO Battles Values ('FirstBattle', '01-01-1800'), ('SecondBattle', '01-01-1851'), ('ThirdBattle', '01-01-1901');
\d
ALTER TABLE Outcomes ADD CONSTRAINT resultConstraint CHECK (result = 'ok' OR result = 'damaged' OR result = 'sunk');
INSERT INTO Outcomes VALUES ('MyFirstShip', 'SecondBattle', 'invalid');
DELETE FROM Outcomes;
INSERT INTO Outcomes VALUES ('MyFirstShip', 'SecondBattle', 'ok');
DELETE FROM Outcomes;
INSERT INTO Outcomes VALUES ('MyFirstShip', 'SecondBattle', 'damaged');
DELETE FROM Outcomes;
INSERT INTO Outcomes VALUES ('MyFirstShip', 'SecondBattle', 'sunk');
CREATE OR REPLACE FUNCTION launch_constraint() RETURNS trigger AS $launch_constraint$DECLARE Tdate DATE;BEGINIF (TG_ARGV[0] = 'Outcomes') THENIF ((SELECT launched FROM ships WHERE name = NEW.shipname) > (SELECT battledate FROM battles B WHERE B.name = NEW.Battlename)) THENRAISE EXCEPTION 'Launch Constraint';END IF;END IF;IF (TG_ARGV[0] = 'Ships') THENFOR Tdate IN SELECT battledate FROM battles WHERE name IN (SELECT battlename FROM outcomes WHERE shipname=NEW.name)LOOP IF (Tdate < NEW.launched) THENRAISE EXCEPTION 'Launch Constraint';END IF;END LOOP;END IF;IF (TG_ARGV[0] = 'Battles') THENFOR Tdate IN SELECT launched FROM ships WHERE name IN (SELECT shipname FROM outcomes WHERE battlename=NEW.name) LOOP IF (Tdate > NEW.battledate) THENRAISE EXCEPTION 'Launch Constraint';END IF;END LOOP;END IF;RETURN NEW;END;$launch_constraint$ LANGUAGE plpgsql;
//TriggersCREATE TRIGGER launch_constraint BEFORE INSERT OR UPDATE ONOutcomesFOR EACH ROW EXECUTE PROCEDURE launch_constraint('Outcomes');
CREATE TRIGGER launch_constraint BEFORE UPDATE ONShipsFOR EACH ROW EXECUTE PROCEDURE launch_constraint('Ships');
CREATE TRIGGER launch_constraint BEFORE UPDATE ONBattlesFOR EACH ROW EXECUTE PROCEDURE launch_constraint('Battles');
CREATE OR REPLACE FUNCTION launch_constraint() RETURNS trigger AS $launch_constraint$DECLARE Tdate DATE;BEGINIF (TG_ARGV[0] = 'Outcomes') THENIF ((SELECT launched FROM ships WHERE name = NEW.shipname) > (SELECT battledate FROM battles B WHERE B.name = NEW.Battlename)) THENRAISE EXCEPTION 'Launch Constraint';END IF;END IF;IF (TG_ARGV[0] = 'Ships') THENFOR Tdate IN SELECT battledate FROM battles WHERE name IN (SELECT battlename FROM outcomes WHERE shipname=NEW.name)LOOP IF (Tdate < NEW.launched) THENRAISE EXCEPTION 'Launch Constraint';END IF;END LOOP;END IF;IF (TG_ARGV[0] = 'Battles') THENFOR Tdate IN SELECT launched FROM ships WHERE name IN (SELECT shipname FROM outcomes WHERE battlename=NEW.name) LOOP IF (Tdate > NEW.battledate) THENRAISE EXCEPTION 'Launch Constraint';END IF;END LOOP;END IF;RETURN NEW;END;$launch_constraint$ LANGUAGE plpgsql;
DELETE FROM Outcomes;
DELETE FROM Ships;
DELETE FROM Battles;
INSERT INTO Ships VALUES ('MyFirstShip', '01-01-1850'), ('MySecondShip', '01-01-1900'), ('MyThirdShip', '01-01-1950');
INSERT INTO Battles Values ('FirstBattle', '01-01-1800'), ('SecondBattle', '01-01-1851'), ('ThirdBattle', '01-01-1901');
INSERT INTO Outcomes VALUES ('MyFirstShip', 'SecondBattle', 'sunk');
INSERT INTO Outcomes VALUES ('MySecondShip', 'FirstBattle', 'ok');
CREATE TRIGGER launch_constraint BEFORE INSERT OR UPDATE ONOutcomesFOR EACH ROW EXECUTE PROCEDURE launch_constraint('Outcomes');
CREATE TRIGGER launch_constraint BEFORE UPDATE ONShipsFOR EACH ROW EXECUTE PROCEDURE launch_constraint('Ships');
CREATE TRIGGER launch_constraint BEFORE UPDATE ONBattlesFOR EACH ROW EXECUTE PROCEDURE launch_constraint('Battles');
UPDATE Battles SET battledate='01-01-1700' WHERE name='SecondBattle';
UPDATE Ships SET launched='01-01-2000' WHERE name='MyFirstShip';
INSERT INTO Outcomes VALUES ('MySecondShip', 'ThirdBattle', 'ok');
DELETE FROM Outcomes;
DELETE FROM Ships;
DELETE FROM Battles;
INSERT INTO Ships VALUES ('MyFirstShip', '01-01-1850'), ('MySecondShip', '01-01-1900'), ('MyThirdShip', '01-01-1950');
INSERT INTO Battles Values ('FirstBattle', '01-01-1800'), ('SecondBattle', '01-01-1851'), ('ThirdBattle', '01-01-1901');
INSERT INTO Outcomes VALUES ('MyFirstShip', 'SecondBattle', 'sunk');
INSERT INTO Outcomes VALUES ('MySecondShip', 'FirstBattle', 'ok');
INSERT INTO Outcomes VALUES ('MySecondShip', 'FirstBattle', 'ok');
UPDATE Battles SET battledate='01-01-1700' WHERE name='SecondBattle';
\connect postgres
drop database hw34;
create database hw35;
\connect hw35
CREATE TABLE Ships (name VARCHAR(20) PRIMARY KEY,                     launched DATE);
CREATE TABLE Battles (name VARCHAR(20) PRIMARY KEY,                       battledate DATE);
CREATE TABLE Outcomes (shipname VARCHAR(20),                        battlename VARCHAR(20),                        result VARCHAR(20),                       FOREIGN KEY (shipname) REFERENCES Ships (name),                       FOREIGN KEY (battlename) REFERENCES Battles (name),                       PRIMARY KEY (shipname, battlename));
                       INSERT INTO Ships VALUES ('MyFirstShip', '01-01-1850'), ('MySecondShip', '01-01-1900'), ('MyThirdShip', '01-01-1950');
INSERT INTO Battles Values ('FirstBattle', '01-01-1800'), ('SecondBattle', '01-01-1851'), ('ThirdBattle', '01-01-1901');
ALTER TABLE Outcomes ADD CONSTRAINT outcomes_result_check CHECK (result = 'ok' or result = 'sunk' or result = 'damaged');
INSERT INTO Outcomes VALUES ('MyFirstShip', 'SecondBattle', 'invalid');
DELETE FROM Outcomes;
INSERT INTO Outcomes VALUES ('MyFirstShip', 'SecondBattle', 'ok');
DELETE FROM Outcomes;
INSERT INTO Outcomes VALUES ('MyFirstShip', 'SecondBattle', 'damaged');
DELETE FROM Outcomes;
INSERT INTO Outcomes VALUES ('MyFirstShip', 'SecondBattle', 'sunk');
CREATE OR REPLACE FUNCTION insert_check() RETURNS trigger AS $insert_check$BEGINIF ((SELECT launched FROM Ships S JOIN Outcomes O ON (S.name = O.shipname)) > (SELECT battledate FROM Battles B Join Outcomes O On (O.battlename = B.name))) THEN RETURN FALSE; END IF;RETURN TRUE; END;$insert_check$ LANGUAGE plpgsql;
CREATE TRIGGER insert_check BEFORE INSERT OR UPDATE ON OutcomesFOR EACH ROW EXECUTE PROCEDURE insert_check();
DELETE FROM Outcomes;
DELETE FROM Ships;
DELETE FROM Battles;
INSERT INTO Ships VALUES ('MyFirstShip', '01-01-1850'), ('MySecondShip', '01-01-1900'), ('MyThirdShip', '01-01-1950');
INSERT INTO Battles Values ('FirstBattle', '01-01-1800'), ('SecondBattle', '01-01-1851'), ('ThirdBattle', '01-01-1901');
INSERT INTO Outcomes VALUES ('MyFirstShip', 'SecondBattle', 'sunk');
CREATE OR REPLACE FUNCTION insert_check() RETURNS trigger AS $insert_check$BEGIN-- Check that launched < battledateIF ((SELECT launched FROM Ships S JOIN Outcomes O ON (S.name = O.shipname)) > (SELECT battledate FROM Battles B Join Outcomes O On (O.battlename = B.name))) THEN RETURN FALSE; END IF;RETURN TRUE; END;$insert_check$ LANGUAGE plpgsql;
CREATE TRIGGER insert_check BEFORE INSERT OR UPDATE ON OutcomesFOR EACH ROW EXECUTE PROCEDURE insert_check();
INSERT INTO Outcomes VALUES ('MySecondShip', 'FirstBattle', 'ok');
UPDATE Battles SET battledate='01-01-1700' WHERE name='SecondBattle';
UPDATE Ships SET launched='01-01-2000' WHERE name='MyFirstShip';
DELETE FROM Outcomes;
DELETE FROM Ships;
DELETE FROM Battles;
INSERT INTO Ships VALUES ('MyFirstShip', '01-01-1850'), ('MySecondShip', '01-01-1900'), ('MyThirdShip', '01-01-1950');
INSERT INTO Battles Values ('FirstBattle', '01-01-1800'), ('SecondBattle', '01-01-1851'), ('ThirdBattle', '01-01-1901');
INSERT INTO Outcomes VALUES ('MyFirstShip', 'SecondBattle', 'sunk');
\df
INSERT INTO Outcomes VALUES ('MySecondShip', 'ThirdBattle', 'ok');
UPDATE Ships SET launched='01-01-2000' WHERE name='MyFirstShip';
\connect postgres
drop database hw35;
create database hw36;
\connect hw36
CREATE TABLE Ships (name VARCHAR(20) PRIMARY KEY,                     launched DATE);
CREATE TABLE Battles (name VARCHAR(20) PRIMARY KEY,                       battledate DATE);
CREATE TABLE Outcomes (shipname VARCHAR(20),                        battlename VARCHAR(20),                        result VARCHAR(20),                       FOREIGN KEY (shipname) REFERENCES Ships (name),                       FOREIGN KEY (battlename) REFERENCES Battles (name),                       PRIMARY KEY (shipname, battlename));
                       INSERT INTO Ships VALUES ('MyFirstShip', '01-01-1850'), ('MySecondShip', '01-01-1900'), ('MyThirdShip', '01-01-1950');
INSERT INTO Battles Values ('FirstBattle', '01-01-1800'), ('SecondBattle', '01-01-1851'), ('ThirdBattle', '01-01-1901');
ALTER TABLE OutcomesADD CONSTRAINT result_valueCHECK (result='ok' OR result='damaged' OR result='sunk');
ALTER TABLE OutcomesALTER COLUMN result SET NOT NULL;
INSERT INTO Outcomes VALUES ('MyFirstShip', 'SecondBattle', 'invalid');
DELETE FROM Outcomes;
INSERT INTO Outcomes VALUES ('MyFirstShip', 'SecondBattle', 'ok');
DELETE FROM Outcomes;
INSERT INTO Outcomes VALUES ('MyFirstShip', 'SecondBattle', 'damaged');
DELETE FROM Outcomes;
INSERT INTO Outcomes VALUES ('MyFirstShip', 'SecondBattle', 'sunk');
CREATE OR REPLACE FUNCTION check_battledate() RETURNS TRIGGER AS $check_battledate$DECLARElaunch_date DATE;battle_date DATE;battle_name VARCHAR(20);ship_name VARCHAR(20);BEGINSELECT NEW.battledate INTO battle_date;SELECT NEW.name INTO battle_name;SELECT shipname INTO ship_nameFROM outcomesWHERE battlename=battle_name;SELECT launched INTO launch_dateFROM shipsWHERE name=ship_name;IF(launch_date>battle_date) THEN   RAISE EXCEPTION 'Launch date of the ship is before the battle date!';END IF;RETURN NEW;END;$check_battledate$ LANGUAGE plpgsql;
CREATE TRIGGER check_battledate BEFORE UPDATE ON battles FOR EACH ROW EXECUTE PROCEDURE check_battledate();
CREATE OR REPLACE FUNCTION check_launchdate() RETURNS TRIGGER AS $check_launchdate$DECLARElaunch_date DATE;battle_date DATE;battle_name VARCHAR(20);ship_name VARCHAR(20);BEGINSELECT NEW.launched INTO launch_date;SELECT NEW.name INTO ship_name;SELECT battlename INTO battle_nameFROM outcomesWHERE shipname=ship_name;SELECT battledate INTO battle_dateFROM battlesWHERE name=battle_name;IF(launch_date>battle_date) THEN   RAISE EXCEPTION 'Launch date of the ship is before the battle date!';END IF;RETURN NEW;END;$check_launchdate$ LANGUAGE plpgsql;
CREATE TRIGGER check_launchdate BEFORE UPDATE ON ships FOR EACH ROW EXECUTE PROCEDURE check_launchdate();
CREATE OR REPLACE FUNCTION check_launchdate_battledate() RETURNS TRIGGER AS $check_launchdate_battledate$DECLAREresult RECORD;BEGINSELECT NEW.shipname,NEW.battlename INTO resultFROM outcomesWHERE (NEW.shipname,NEW.battlename) IN(SELECT ships.name,battles.nameFROM ships,battles WHERE launched>battledate);IF(result IS NOT NULL) THEN   RAISE EXCEPTION 'Launch date of the ship is before the battle date!';END IF;RETURN NEW;END;$check_launchdate_battledate$ LANGUAGE plpgsql;
CREATE TRIGGER check_launchdate_battledate BEFORE INSERT OR UPDATE ON outcomes FOR EACH ROW EXECUTE PROCEDURE check_launchdate_battledate();
DELETE FROM Outcomes;
DELETE FROM Ships;
DELETE FROM Battles;
INSERT INTO Ships VALUES ('MyFirstShip', '01-01-1850'), ('MySecondShip', '01-01-1900'), ('MyThirdShip', '01-01-1950');
INSERT INTO Battles Values ('FirstBattle', '01-01-1800'), ('SecondBattle', '01-01-1851'), ('ThirdBattle', '01-01-1901');
INSERT INTO Outcomes VALUES ('MyFirstShip', 'SecondBattle', 'sunk');
INSERT INTO Outcomes VALUES ('MySecondShip', 'FirstBattle', 'ok');
UPDATE Battles SET battledate='01-01-1700' WHERE name='SecondBattle';
UPDATE Ships SET launched='01-01-2000' WHERE name='MyFirstShip';
INSERT INTO Outcomes VALUES ('MySecondShip', 'ThirdBattle', 'ok');
\connect postgres
drop database hw36;
create database hw37;
\connect hw37
CREATE TABLE Ships (name VARCHAR(20) PRIMARY KEY,                     launched DATE);
CREATE TABLE Battles (name VARCHAR(20) PRIMARY KEY,                       battledate DATE);
CREATE TABLE Outcomes (shipname VARCHAR(20),                        battlename VARCHAR(20),                        result VARCHAR(20),                       FOREIGN KEY (shipname) REFERENCES Ships (name),                       FOREIGN KEY (battlename) REFERENCES Battles (name),                       PRIMARY KEY (shipname, battlename));
                       INSERT INTO Ships VALUES ('MyFirstShip', '01-01-1850'), ('MySecondShip', '01-01-1900'), ('MyThirdShip', '01-01-1950');
INSERT INTO Battles Values ('FirstBattle', '01-01-1800'), ('SecondBattle', '01-01-1851'), ('ThirdBattle', '01-01-1901');
alter table outcomesadd constraint outcome_inCHECK ( result IN ('ok','damaged','sunk') AND result IS NOT NULL);
INSERT INTO Outcomes VALUES ('MyFirstShip', 'SecondBattle', 'invalid');
DELETE FROM Outcomes;
INSERT INTO Outcomes VALUES ('MyFirstShip', 'SecondBattle', 'ok');
DELETE FROM Outcomes;
INSERT INTO Outcomes VALUES ('MyFirstShip', 'SecondBattle', 'damaged');
DELETE FROM Outcomes;
INSERT INTO Outcomes VALUES ('MyFirstShip', 'SecondBattle', 'sunk');
DELETE FROM Outcomes;
DELETE FROM Ships;
DELETE FROM Battles;
INSERT INTO Ships VALUES ('MyFirstShip', '01-01-1850'), ('MySecondShip', '01-01-1900'), ('MyThirdShip', '01-01-1950');
INSERT INTO Battles Values ('FirstBattle', '01-01-1800'), ('SecondBattle', '01-01-1851'), ('ThirdBattle', '01-01-1901');
INSERT INTO Outcomes VALUES ('MyFirstShip', 'SecondBattle', 'sunk');
create or replace function checkdate() returns trigger as$checkdate$Beginif s.launched > b.battledate OR s.launched IS NULL OR b.battledate IS NULL from ships s, battles b where s.name = NEW.shipname AND b.name=NEW.battlename group by s.name,s.launched,b.battledate then Raise Exception 'NO SHIP CAN BE IN BATTLE BEFORE IT IS LAUNCHED'; END IF;return new;END;$checkdate$ LANGUAGE plpgsql;
CREATE TRIGGER checkdate BEFORE INSERT OR UPDATE ON outcomesfor each row execute procedure checkdate();
create or replace function checkdate_ships() returns trigger as$checkdate_ships$Beginif NEW.launched > b.battledate OR NEW.launched IS NULL OR b.battledate IS NULL from battles b, outcomes o where NEW.name = o.shipname AND b.name=o.battlename group by NEW.name,NEW.launched,b.battledate then Raise Exception 'NO SHIP CAN BE IN BATTLE BEFORE IT IS LAUNCHED'; END IF;return new;END;$checkdate_ships$ LANGUAGE plpgsql;
CREATE TRIGGER checkdate_ships BEFORE INSERT OR UPDATE ON shipsfor each row execute procedure checkdate_ships();
create or replace function checkdate_battles() returns trigger as$checkdate_battles$Beginif s.launched > NEW.battledate OR s.launched IS NULL OR NEW.battledate IS NULL from ships s, outcomes o where s.name = o.shipname AND NEW.name=o.battlename group by s.name,s.launched,NEW.battledate then Raise Exception 'NO SHIP CAN BE IN BATTLE BEFORE IT IS LAUNCHED'; END IF;return new;END;                               $checkdate_battles$ LANGUAGE plpgsql;
CREATE TRIGGER checkdate_battles BEFORE INSERT OR UPDATE ON battlesfor each row execute procedure checkdate_battles();
INSERT INTO Outcomes VALUES ('MySecondShip', 'FirstBattle', 'ok');
UPDATE Battles SET battledate='01-01-1700' WHERE name='SecondBattle';
UPDATE Ships SET launched='01-01-2000' WHERE name='MyFirstShip';
INSERT INTO Outcomes VALUES ('MySecondShip', 'ThirdBattle', 'ok');
quit;
exit;
quit;
\q
